#!/usr/bin/python
# -*- coding: utf-8 -*-
# Theme parser program for BotLibre response lists
#

# External routines

import re, errno, json
from sys import argv, exit
from os import makedirs, listdir
from os.path import basename, join
from math import log10, floor
from urllib.request import urlopen, Request, HTTPError
from urllib.parse import urlencode, quote_plus

# Variables

# Response dictionary key names (not defined by response-lists)
question_key = "question"
response_key = "response"
# Global token variable
token = None
# Regex patterns for response-lists processing
xt_html = re.compile(r"<[^>]+>")
xpuncts = re.compile(r"[^-\w\s]|\s+[^\w]+\s+")
xspaces = re.compile(r"\s+")
xextens = re.compile(r"\.res$|\.$|$")

# Functions

# Function: show_help
def show_help():
  self_name = basename(argv[0])
  print("Synopsis:")
  print("\t", self_name, "show <file>")
  print("\t", self_name, "show [field] <file>")
  return None
# Function: show_help

# Function: parse_responses
def parse_responses(list_file):
  # Regex patterns for BotLibre response lists (simplified)
  xdivide = re.compile(r"^$")
  xmeta_key = re.compile(r"^[a-z ]+: ")
  xmeta_value = re.compile(r": .+$")
  # Responses are a list of disctionaries
  responses = []
  the_response = {}
  for line in list_file:
    if xdivide.match(line):
      responses.append(the_response)
      the_response = {}
    if not the_response.get(question_key):
      the_response[question_key] = line.strip()
    elif not xmeta_key.search(line):
      if the_response.get(response_key):
        the_response[response_key] += line.strip()
      else:
        the_response[response_key] = line.strip()
    else:
      the_response[xmeta_value.sub('', line).strip()] =\
          xmeta_key.sub('', line.strip())
  return responses
# Function: parse_responses

# Function: show_responses
def show_responses(responses=None, field=question_key):
  # Check responses
  if responses:
    counter = 0
    pad = floor(log10(len(responses))) + 1
    for the_response in responses:
      counter += 1
      print(str(counter).zfill(pad), the_response.get(field))
    # Display total
    print("Total number of entries:", counter)
  return None
# Function: show_responses

# Function: dump_responses
def dump_responses(responses, path="./dump_responses"):
  try:
    makedirs(path, 0o755)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise
  if responses:
    counter = 0
    pad = floor(log10(len(responses))) + 1
    for the_response in responses:
      counter += 1
      file_name = str(counter).zfill(pad)
      file_name += " - " + the_response[question_key]
      try:
        with open(join(path, file_name), "w+") as response_file:
          #response_file.write(strip_tags(the_response[response_key]))
          response_file.write(normalize(the_response[response_key]))
          response_file.close()
      except IOError:
        print("Error writing to:", file_name)
  return None
# Function: dump_responses

# Function: strip_tags
def strip_tags(text=None):
  if text:
    return xt_html.sub("", text)
  return None
# Function: strip_tags

# Function: normalize
def normalize(text=None):
  if text:
    return (xspaces.sub(" ", (xpuncts.sub(" ", strip_tags(text))))
        ).lower().strip()
  return None
# Function: normalize

# Function: fetch_token
def fetch_token(login=None, password=None):
  with open("authentication", "r") as authfile:
    payload = json.load(authfile)
    print("fetch_token.payload:", payload)
    #params = urlencode(payload, quote_via=quote_plus)
    params = urlencode(payload).encode()
    print("fetch_token.params:", params)
    #url = "https://paraphraser.ru/token?{0}".format(params)
    url = Request("https://paraphraser.ru/token/", data=params)
    #print("fetch_token.url:", url)
    try:
      response = json.loads(urlopen(url).read().decode("utf-8"))
      print("fetch_token.response:", response)
      return response["token"]
    except HTTPError:
      return None
# Function: fetch_token

# Function: submit_query
def submit_query(payload):
  #params = urlencode(payload, quote_via=quote_plus)
  params = urlencode(payload).encode()
  print("submit_query.params:", params)
  #url = "http://paraphraser.ru/api?{0}".format(params)
  url = Request("http://paraphraser.ru/api/", data=params)
  #print("submit_query.url:", url)
  try:
    return json.loads(urlopen(url).read().decode("utf-8"))
  except Exception as e:
    return json.loads(e.read().decode("utf-8"))
# Function: submit_query

# Function: get_keywords
def get_keywords(text=""):
  print("get_keywords.text:", text)
  global token
  if not token:
    token = fetch_token()
  if token is not None:
    result = submit_query({
        "c": "keywords",
        "query": str(text),
        "top": 3,
        "pos": "NOUN",
        "clusters": 1,
        "vecth": 1.0,
        "synth": 1.0,
        "expand": 0,
        "mwe": 1,
        "forms": 0,
        "lang": "ru",
        "format": "json",
        "token": token,
      })
    # Display Paraphraser response
    if result["code"] == 0:
      response = result["response"]
      for item in response:
        for value in response[item]["keywords"]:
          print(value)
      return response
    else:
      print("Error executing query.", result["msg"])
  else:
    print("Wrong login or password...")
  return None
# Function: get_keywords

# Main program
if len(argv) < 2:
  show_help()
  exit()
elif argv[1] == "show":
  # Command line: <program> show <file>
  try:
    with open(argv[2], "r", 1) as list_file:
      responses = parse_responses(list_file)
      show_responses(responses)
  except IOError:
    pass
  else:
    list_file.close
    exit()
  # Command line: <program> show [field] <file>
  try:
    with open(argv[3], "r", 1) as list_file:
      responses = parse_responses(list_file)
      show_responses(responses, argv[2])
  except IOError:
    show_help()
    exit()
  else:
    list_file.close
    exit()
elif argv[1] == "dump":
  # Command line: <program> dump <file>
  try:
    with open(argv[2], "r", 1) as list_file:
      responses = parse_responses(list_file)
      dump_responses(responses)
  except IOError:
    show_help()
    exit()
  else:
    list_file.close
    exit()
elif argv[1] == "get-keywords":
  # Command line: <program> get-vector
  for the_file in sorted(listdir("dump_responses")):
    print("main.file:", the_file)
    with open(join("dump_responses", the_file)) as document:
      keywords = get_keywords(document.read())
      if keywords:
        print(the_file, keywords)
      document.close()
  exit()
  get_keywords()
else:
  show_help()
  exit()

# vim: se et ts=2 sw=2 number syntax=python:
